{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Desktop\\\\Solve\\\\TREINAMENTOS\\\\NLW\\\\#4\\\\moveit-next\\\\src\\\\contexts\\\\ChallengeContexts.tsx\";\nimport { createContext, useEffect, useState } from \"react\";\nimport challenges from \"../../challenges.json\";\nexport const ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider({\n  children\n}) {\n  const {\n    0: level,\n    1: setLevel\n  } = useState(1);\n  const {\n    0: currentExperience,\n    1: setCurrentExperience\n  } = useState(0);\n  const {\n    0: challengesCompleted,\n    1: setChallengesCompleted\n  } = useState(0);\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null);\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n  useEffect(() => {\n    Notification.requestPermission();\n  }, []);\n\n  function startNewChallenge() {\n    const randomChallengIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengIndex];\n    setActiveChallenge(challenge);\n    console.log(Notification.permission);\n\n    if (Notification.permission === 'granted') {\n      new Notification('Novo desafio ðŸŽ‰', {\n        body: `Valendo: ${challenge.amount}xp!`\n      });\n    }\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {\n    if (!activeChallenge) return;\n    const {\n      amount\n    } = activeChallenge;\n    let finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      setLevel(level + 1);\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level,\n      experienceToNextLevel,\n      currentExperience,\n      challengesCompleted,\n      startNewChallenge,\n      activeChallenge,\n      resetChallenge,\n      completeChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["D:/Desktop/Solve/TREINAMENTOS/NLW/#4/moveit-next/src/contexts/ChallengeContexts.tsx"],"names":["createContext","useEffect","useState","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","Notification","requestPermission","startNewChallenge","randomChallengIndex","floor","random","length","challenge","console","log","permission","body","amount","resetChallenge","completeChallenge","finalExperience"],"mappings":";;AAAA,SAASA,aAAT,EAAmCC,SAAnC,EAA8CC,QAA9C,QAA8D,OAA9D;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAuBA,OAAO,MAAMC,iBAAiB,gBAAGJ,aAAa,CAAC,EAAD,CAAvC;AAEP,OAAO,SAASK,kBAAT,CAA4B;AAAEC,EAAAA;AAAF,CAA5B,EAAmE;AAExE,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBN,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM;AAAA,OAACO,iBAAD;AAAA,OAAoBC;AAApB,MAA4CR,QAAQ,CAAC,CAAD,CAA1D;AACA,QAAM;AAAA,OAACS,mBAAD;AAAA,OAAsBC;AAAtB,MAAgDV,QAAQ,CAAC,CAAD,CAA9D;AACA,QAAM;AAAA,OAACW,eAAD;AAAA,OAAkBC;AAAlB,MAAwCZ,QAAQ,CAAC,IAAD,CAAtD;AACA,QAAMa,qBAAqB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACV,KAAK,GAAG,CAAT,IAAc,CAAvB,EAA0B,CAA1B,CAA9B;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,YAAY,CAACC,iBAAb;AACD,GAFQ,EAEN,EAFM,CAAT;;AAIA,WAASC,iBAAT,GAA6B;AAC3B,UAAMC,mBAAmB,GAAGL,IAAI,CAACM,KAAL,CAAWN,IAAI,CAACO,MAAL,KAAgBpB,UAAU,CAACqB,MAAtC,CAA5B;AACA,UAAMC,SAAS,GAAGtB,UAAU,CAACkB,mBAAD,CAA5B;AACAP,IAAAA,kBAAkB,CAACW,SAAD,CAAlB;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAYT,YAAY,CAACU,UAAzB;;AACA,QAAGV,YAAY,CAACU,UAAb,KAA4B,SAA/B,EAAyC;AACvC,UAAIV,YAAJ,CAAiB,iBAAjB,EAAoC;AAClCW,QAAAA,IAAI,EAAG,YAAWJ,SAAS,CAACK,MAAO;AADD,OAApC;AAGD;AACF;;AAED,WAASC,cAAT,GAA0B;AACxBjB,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD;;AAED,WAASkB,iBAAT,GAA4B;AAC1B,QAAG,CAACnB,eAAJ,EAAqB;AAErB,UAAM;AAAEiB,MAAAA;AAAF,QAAajB,eAAnB;AAEA,QAAIoB,eAAe,GAAGxB,iBAAiB,GAAGqB,MAA1C;;AAEA,QAAGG,eAAe,IAAIlB,qBAAtB,EAA4C;AAC1CkB,MAAAA,eAAe,GAAGA,eAAe,GAAGlB,qBAApC;AACAP,MAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD;;AAEDG,IAAAA,oBAAoB,CAACuB,eAAD,CAApB;AACAnB,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAF,IAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACD;;AAED,sBACE,QAAC,iBAAD,CAAmB,QAAnB;AACE,IAAA,KAAK,EAAE;AACLJ,MAAAA,KADK;AAELQ,MAAAA,qBAFK;AAGLN,MAAAA,iBAHK;AAILE,MAAAA,mBAJK;AAKLS,MAAAA,iBALK;AAMLP,MAAAA,eANK;AAOLkB,MAAAA,cAPK;AAQLC,MAAAA;AARK,KADT;AAAA,cAYG1B;AAZH;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD","sourcesContent":["import { createContext, ReactNode, useEffect, useState } from \"react\";\r\nimport challenges from \"../../challenges.json\";\r\n\r\ninterface Challenge {\r\n  type: \"body\" | \"eye\";\r\n  description: string;\r\n  amount: number;\r\n}\r\n\r\ninterface ChallengeContextData {\r\n  level: number;\r\n  experienceToNextLevel: number;\r\n  currentExperience: number;\r\n  challengesCompleted: number;\r\n  activeChallenge: Challenge;\r\n  startNewChallenge: () => void;\r\n  resetChallenge: () => void;\r\n  completeChallenge: () => void;\r\n}\r\n\r\ninterface ChallengesProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const ChallengesContext = createContext({} as ChallengeContextData);\r\n\r\nexport function ChallengesProvider({ children }: ChallengesProviderProps) {\r\n  \r\n  const [level, setLevel] = useState(1);\r\n  const [currentExperience, setCurrentExperience] = useState(0);\r\n  const [challengesCompleted, setChallengesCompleted] = useState(0);\r\n  const [activeChallenge, setActiveChallenge] = useState(null);\r\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\r\n\r\n  useEffect(() => {\r\n    Notification.requestPermission()\r\n  }, [])\r\n\r\n  function startNewChallenge() {\r\n    const randomChallengIndex = Math.floor(Math.random() * challenges.length);\r\n    const challenge = challenges[randomChallengIndex];\r\n    setActiveChallenge(challenge);\r\n\r\n    console.log(Notification.permission)\r\n    if(Notification.permission === 'granted'){\r\n      new Notification('Novo desafio ðŸŽ‰', {\r\n        body: `Valendo: ${challenge.amount}xp!`\r\n      })\r\n    }\r\n  }\r\n\r\n  function resetChallenge() {\r\n    setActiveChallenge(null);\r\n  }\r\n\r\n  function completeChallenge(){\r\n    if(!activeChallenge) return;\r\n\r\n    const { amount } = activeChallenge\r\n\r\n    let finalExperience = currentExperience + amount\r\n\r\n    if(finalExperience >= experienceToNextLevel){\r\n      finalExperience = finalExperience - experienceToNextLevel\r\n      setLevel(level + 1)\r\n    }\r\n\r\n    setCurrentExperience(finalExperience)\r\n    setActiveChallenge(null)\r\n    setChallengesCompleted(challengesCompleted + 1)\r\n  }\r\n\r\n  return (\r\n    <ChallengesContext.Provider\r\n      value={{\r\n        level,\r\n        experienceToNextLevel,\r\n        currentExperience,\r\n        challengesCompleted,\r\n        startNewChallenge,\r\n        activeChallenge,\r\n        resetChallenge,\r\n        completeChallenge\r\n      }}\r\n    >\r\n      {children}\r\n    </ChallengesContext.Provider>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}