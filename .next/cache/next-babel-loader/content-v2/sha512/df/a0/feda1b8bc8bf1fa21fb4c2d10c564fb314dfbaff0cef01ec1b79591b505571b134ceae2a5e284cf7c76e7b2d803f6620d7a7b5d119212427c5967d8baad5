{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"D:/Desktop/Solve/TREINAMENTOS/NLW/#4/moveit-next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"D:\\\\Desktop\\\\Solve\\\\TREINAMENTOS\\\\NLW\\\\#4\\\\moveit-next\\\\src\\\\components\\\\CountDown.tsx\",\n    _s = $RefreshSig$();\n\nimport Styles from \"../styles/components/CountDown.module.css\";\nimport { AiFillCheckCircle } from \"react-icons/ai\";\nimport { useContext } from \"react\";\nimport { CountdownContext } from \"../contexts/CountdownContexts\";\nimport { ChallengesContext } from \"../contexts/ChallengeContexts\";\nexport default function CountDown() {\n  _s();\n\n  var _useContext = useContext(CountdownContext),\n      hasFinished = _useContext.hasFinished,\n      isActive = _useContext.isActive,\n      minutes = _useContext.minutes,\n      seconds = _useContext.seconds,\n      resetCountdown = _useContext.resetCountdown,\n      startCountdown = _useContext.startCountdown;\n\n  var _useContext2 = useContext(ChallengesContext),\n      isDark = _useContext2.isDark;\n\n  var _String$padStart$spli = String(minutes).padStart(2, \"0\").split(\"\"),\n      _String$padStart$spli2 = _slicedToArray(_String$padStart$spli, 2),\n      minuteLeft = _String$padStart$spli2[0],\n      minuteRight = _String$padStart$spli2[1];\n\n  var _String$padStart$spli3 = String(seconds).padStart(2, \"0\").split(\"\"),\n      _String$padStart$spli4 = _slicedToArray(_String$padStart$spli3, 2),\n      secondLeft = _String$padStart$spli4[0],\n      secondRight = _String$padStart$spli4[1];\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: isDark ? \"\".concat(Styles.CountDownContainer, \" \").concat(Styles.darkTheme) : \"\".concat(Styles.CountDownContainer),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: minuteLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: minuteRight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \":\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: secondLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: secondRight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), hasFinished ? /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: true,\n      className: Styles.CountdownButton,\n      children: [\"Ciclo Encerrado\", /*#__PURE__*/_jsxDEV(AiFillCheckCircle, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this) : isActive ? /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: isDark ? \"\".concat(Styles.CountdownButton, \" \").concat(Styles.CountdownButtonAcative, \" \").concat(Styles.CountdownButtonAcativeDarkTheme) : \"\".concat(Styles.CountdownButton, \" \").concat(Styles.CountdownButtonAcative),\n      onClick: resetCountdown,\n      children: \"Abandonar Ciclo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: isDark ? \"\".concat(Styles.CountdownButton, \" \").concat(Styles.CountdownButtonDarkTheme) : \"\".concat(Styles.CountdownButton),\n      onClick: startCountdown,\n      children: \"In\\xEDciar um ciclo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CountDown, \"b1nygHEvj/1iEi7ZlUNeg/DLpLs=\");\n\n_c = CountDown;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountDown\");","map":{"version":3,"sources":["D:/Desktop/Solve/TREINAMENTOS/NLW/#4/moveit-next/src/components/CountDown.tsx"],"names":["Styles","AiFillCheckCircle","useContext","CountdownContext","ChallengesContext","CountDown","hasFinished","isActive","minutes","seconds","resetCountdown","startCountdown","isDark","String","padStart","split","minuteLeft","minuteRight","secondLeft","secondRight","CountDownContainer","darkTheme","CountdownButton","CountdownButtonAcative","CountdownButtonAcativeDarkTheme","CountdownButtonDarkTheme"],"mappings":";;;;;;AAAA,OAAOA,MAAP,MAAmB,2CAAnB;AACA,SAASC,iBAAT,QAAkC,gBAAlC;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,gBAAT,QAAiC,+BAAjC;AACA,SAASC,iBAAT,QAAkC,+BAAlC;AAEA,eAAe,SAASC,SAAT,GAAqB;AAAA;;AAAA,oBAQ9BH,UAAU,CAACC,gBAAD,CARoB;AAAA,MAEhCG,WAFgC,eAEhCA,WAFgC;AAAA,MAGhCC,QAHgC,eAGhCA,QAHgC;AAAA,MAIhCC,OAJgC,eAIhCA,OAJgC;AAAA,MAKhCC,OALgC,eAKhCA,OALgC;AAAA,MAMhCC,cANgC,eAMhCA,cANgC;AAAA,MAOhCC,cAPgC,eAOhCA,cAPgC;;AAAA,qBASjBT,UAAU,CAACE,iBAAD,CATO;AAAA,MAS3BQ,MAT2B,gBAS3BA,MAT2B;;AAAA,8BAWAC,MAAM,CAACL,OAAD,CAAN,CAAgBM,QAAhB,CAAyB,CAAzB,EAA4B,GAA5B,EAAiCC,KAAjC,CAAuC,EAAvC,CAXA;AAAA;AAAA,MAW3BC,UAX2B;AAAA,MAWfC,WAXe;;AAAA,+BAYAJ,MAAM,CAACJ,OAAD,CAAN,CAAgBK,QAAhB,CAAyB,CAAzB,EAA4B,GAA5B,EAAiCC,KAAjC,CAAuC,EAAvC,CAZA;AAAA;AAAA,MAY3BG,UAZ2B;AAAA,MAYfC,WAZe;;AAclC,sBACE;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEP,MAAM,aAAMZ,MAAM,CAACoB,kBAAb,cAAmCpB,MAAM,CAACqB,SAA1C,cAA2DrB,MAAM,CAACoB,kBAAlE,CAAtB;AAAA,8BACE;AAAA,gCACE;AAAA,oBAAOJ;AAAP;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,oBAAOC;AAAP;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,eAME;AAAA,gCACE;AAAA,oBAAOC;AAAP;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,oBAAOC;AAAP;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAaGb,WAAW,gBACV;AAAQ,MAAA,QAAQ,MAAhB;AAAiB,MAAA,SAAS,EAAEN,MAAM,CAACsB,eAAnC;AAAA,iDAEE,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADU,GAKRf,QAAQ,gBACV;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,SAAS,EAAEK,MAAM,aAAMZ,MAAM,CAACsB,eAAb,cAAgCtB,MAAM,CAACuB,sBAAvC,cAAiEvB,MAAM,CAACwB,+BAAxE,cAA+GxB,MAAM,CAACsB,eAAtH,cAAyItB,MAAM,CAACuB,sBAAhJ,CAFnB;AAGE,MAAA,OAAO,EAAEb,cAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADU,gBASV;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,SAAS,EAAEE,MAAM,aAAMZ,MAAM,CAACsB,eAAb,cAAgCtB,MAAM,CAACyB,wBAAvC,cAAuEzB,MAAM,CAACsB,eAA9E,CAFnB;AAGE,MAAA,OAAO,EAAEX,cAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA3BJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsCD;;GApDuBN,S;;KAAAA,S","sourcesContent":["import Styles from \"../styles/components/CountDown.module.css\";\r\nimport { AiFillCheckCircle } from \"react-icons/ai\";\r\nimport { useContext } from \"react\";\r\nimport { CountdownContext } from \"../contexts/CountdownContexts\";\r\nimport { ChallengesContext } from \"../contexts/ChallengeContexts\";\r\n\r\nexport default function CountDown() {\r\n  const {\r\n    hasFinished,\r\n    isActive,\r\n    minutes,\r\n    seconds,\r\n    resetCountdown,\r\n    startCountdown,\r\n  } = useContext(CountdownContext);\r\n  const {isDark} = useContext(ChallengesContext)\r\n\r\n  const [minuteLeft, minuteRight] = String(minutes).padStart(2, \"0\").split(\"\");\r\n  const [secondLeft, secondRight] = String(seconds).padStart(2, \"0\").split(\"\");\r\n\r\n  return (\r\n    <div>\r\n      <div className={isDark ? `${Styles.CountDownContainer} ${Styles.darkTheme}` : `${Styles.CountDownContainer}`}>\r\n        <div>\r\n          <span>{minuteLeft}</span>\r\n          <span>{minuteRight}</span>\r\n        </div>\r\n        <span>:</span>\r\n        <div>\r\n          <span>{secondLeft}</span>\r\n          <span>{secondRight}</span>\r\n        </div>\r\n      </div>\r\n\r\n      {hasFinished ? (\r\n        <button disabled className={Styles.CountdownButton}>\r\n          Ciclo Encerrado\r\n          <AiFillCheckCircle />\r\n        </button>\r\n      ) : isActive ? (\r\n        <button\r\n          type=\"button\"\r\n          className={isDark ? `${Styles.CountdownButton} ${Styles.CountdownButtonAcative} ${Styles.CountdownButtonAcativeDarkTheme}` : `${Styles.CountdownButton} ${Styles.CountdownButtonAcative}`}\r\n          onClick={resetCountdown}\r\n        >\r\n          Abandonar Ciclo\r\n        </button>\r\n      ) : (\r\n        <button\r\n          type=\"button\"\r\n          className={isDark ? `${Styles.CountdownButton} ${Styles.CountdownButtonDarkTheme}` : `${Styles.CountdownButton}`}\r\n          onClick={startCountdown}\r\n        >\r\n          In√≠ciar um ciclo\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}