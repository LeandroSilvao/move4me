{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createContext, useEffect, useState } from \"react\";\nimport challenges from \"../../challenges.json\";\nimport Cookies from \"js-cookie\";\nimport { LevelUpModal } from \"../components/LevelUpModal\";\nexport var ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(props) {\n  var _props$level, _props$currentExperie, _props$challengesComp, _props$isDark;\n\n  var _useState = useState((_props$level = props.level) !== null && _props$level !== void 0 ? _props$level : 1),\n      level = _useState[0],\n      setLevel = _useState[1];\n\n  var _useState2 = useState((_props$currentExperie = props.currentExperience) !== null && _props$currentExperie !== void 0 ? _props$currentExperie : 0),\n      currentExperience = _useState2[0],\n      setCurrentExperience = _useState2[1];\n\n  var _useState3 = useState((_props$challengesComp = props.challengesCompleted) !== null && _props$challengesComp !== void 0 ? _props$challengesComp : 0),\n      challengesCompleted = _useState3[0],\n      setChallengesCompleted = _useState3[1];\n\n  var _useState4 = useState(null),\n      activeChallenge = _useState4[0],\n      setActiveChallenge = _useState4[1];\n\n  var experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n\n  var _useState5 = useState(false),\n      isLevelUpModalOpen = _useState5[0],\n      setIsLevelUpModalOpen = _useState5[1];\n\n  var _useState6 = useState((_props$isDark = props.isDark) !== null && _props$isDark !== void 0 ? _props$isDark : false),\n      isDark = _useState6[0],\n      setIsDark = _useState6[1];\n\n  useEffect(function () {\n    if (Notification) Notification.requestPermission();\n    if (isDark) document.body.classList.add(\"body-dt\");else document.body.classList.remove(\"body-dt\");\n  }, []);\n  useEffect(function () {\n    Cookies.set('isDark', isDark.toString());\n  }, [isDark]);\n  useEffect(function () {\n    Cookies.set(\"level\", level.toString());\n    Cookies.set(\"currentExperience\", currentExperience.toString());\n    Cookies.set(\"challengesCompleted\", challengesCompleted.toString());\n  }, [level, currentExperience, challengesCompleted]);\n\n  function SetDarkTheme(isSet) {\n    if (isSet) document.body.classList.add(\"body-dt\");else document.body.classList.remove(\"body-dt\");\n    Cookies.set('isDark', isDark.toString());\n    setIsDark(isSet);\n  }\n\n  function levelUp() {\n    setLevel(level + 1);\n    setIsLevelUpModalOpen(true);\n  }\n\n  function closeLevelUpModal() {\n    setIsLevelUpModalOpen(false);\n  }\n\n  function startNewChallenge() {\n    var randomChallengIndex = Math.floor(Math.random() * challenges.length);\n    var challenge = challenges[randomChallengIndex];\n    setActiveChallenge(challenge);\n\n    if (Audio) {\n      new Audio(\"/notification.mp3\").play();\n    }\n\n    if (Notification) {\n      if (Notification.permission === \"granted\") {\n        new Notification(\"Novo desafio\", {\n          body: \"Valendo: \".concat(challenge.amount, \"xp!\")\n        });\n      }\n    }\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {\n    if (!activeChallenge) return;\n    var amount = activeChallenge.amount;\n    var finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxs(ChallengesContext.Provider, {\n    value: {\n      isDark: isDark,\n      level: level,\n      experienceToNextLevel: experienceToNextLevel,\n      currentExperience: currentExperience,\n      challengesCompleted: challengesCompleted,\n      startNewChallenge: startNewChallenge,\n      activeChallenge: activeChallenge,\n      resetChallenge: resetChallenge,\n      completeChallenge: completeChallenge,\n      levelUp: levelUp,\n      closeLevelUpModal: closeLevelUpModal,\n      SetDarkTheme: SetDarkTheme\n    },\n    children: [props.children, isLevelUpModalOpen && /*#__PURE__*/_jsx(LevelUpModal, {})]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}