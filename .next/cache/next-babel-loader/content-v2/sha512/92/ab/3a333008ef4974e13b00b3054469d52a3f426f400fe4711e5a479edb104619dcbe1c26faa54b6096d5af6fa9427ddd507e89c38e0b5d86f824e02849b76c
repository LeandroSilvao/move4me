{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Desktop\\\\Solve\\\\TREINAMENTOS\\\\NLW\\\\#4\\\\moveit-next\\\\src\\\\contexts\\\\ChallengeContexts.tsx\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { createContext, useEffect, useState } from \"react\";\nimport challenges from \"../../challenges.json\";\nimport Cookies from 'js-cookie';\nimport { LevelUpModal } from \"../components/LevelUpModal\";\nexport const ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  var _rest$level, _rest$currentExperien, _rest$challengesCompl;\n\n  let {\n    children\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"children\"]);\n\n  const {\n    0: level,\n    1: setLevel\n  } = useState((_rest$level = rest.level) !== null && _rest$level !== void 0 ? _rest$level : 1);\n  const {\n    0: currentExperience,\n    1: setCurrentExperience\n  } = useState((_rest$currentExperien = rest.currentExperience) !== null && _rest$currentExperien !== void 0 ? _rest$currentExperien : 0);\n  const {\n    0: challengesCompleted,\n    1: setChallengesCompleted\n  } = useState((_rest$challengesCompl = rest.challengesCompleted) !== null && _rest$challengesCompl !== void 0 ? _rest$challengesCompl : 0);\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null);\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n  const {\n    0: isLevelUpModalOpen,\n    1: setIsLevelUpModalOpen\n  } = useState(false);\n  useEffect(() => {\n    Notification.requestPermission();\n  }, []);\n  useEffect(() => {\n    Cookies.set('level', level.toString());\n    Cookies.set('currentExperience', currentExperience.toString());\n    Cookies.set('challengesCompleted', challengesCompleted.toString());\n  }, [level, currentExperience, challengesCompleted]);\n\n  function levelUp() {\n    setLevel(level + 1);\n    setIsLevelUpModalOpen(true);\n  }\n\n  function startNewChallenge() {\n    const randomChallengIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengIndex];\n    setActiveChallenge(challenge);\n    new Audio(\"/notification.mp3\").play();\n\n    if (Notification.permission === \"granted\") {\n      new Notification(\"Novo desafio\", {\n        body: `Valendo: ${challenge.amount}xp!`\n      });\n    }\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {\n    if (!activeChallenge) return;\n    const {\n      amount\n    } = activeChallenge;\n    let finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level,\n      experienceToNextLevel,\n      currentExperience,\n      challengesCompleted,\n      startNewChallenge,\n      activeChallenge,\n      resetChallenge,\n      completeChallenge,\n      levelUp\n    },\n    children: [children, isLevelUpModalOpen && /*#__PURE__*/_jsxDEV(LevelUpModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 30\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["D:/Desktop/Solve/TREINAMENTOS/NLW/#4/moveit-next/src/contexts/ChallengeContexts.tsx"],"names":["createContext","useEffect","useState","challenges","Cookies","LevelUpModal","ChallengesContext","ChallengesProvider","children","rest","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","isLevelUpModalOpen","setIsLevelUpModalOpen","Notification","requestPermission","set","toString","levelUp","startNewChallenge","randomChallengIndex","floor","random","length","challenge","Audio","play","permission","body","amount","resetChallenge","completeChallenge","finalExperience"],"mappings":"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","sourcesContent":["import { createContext, ReactNode, useEffect, useState } from \"react\";\r\nimport challenges from \"../../challenges.json\";\r\nimport Cookies from 'js-cookie'\r\nimport { LevelUpModal } from \"../components/LevelUpModal\";\r\n\r\ninterface Challenge {\r\n  type: \"body\" | \"eye\";\r\n  description: string;\r\n  amount: number;\r\n}\r\n\r\ninterface ChallengeContextData {\r\n  level: number;\r\n  experienceToNextLevel: number;\r\n  currentExperience: number;\r\n  challengesCompleted: number;\r\n  activeChallenge: Challenge;\r\n  startNewChallenge: () => void;\r\n  resetChallenge: () => void;\r\n  completeChallenge: () => void;\r\n  levelUp: () => void;\r\n}\r\n\r\ninterface ChallengesProviderProps {\r\n  children: ReactNode;\r\n  level: number;\r\n  currentExperience: number;\r\n  challengesCompleted: number;\r\n}\r\n\r\nexport const ChallengesContext = createContext({} as ChallengeContextData);\r\n\r\nexport function ChallengesProvider({ children, ...rest }: ChallengesProviderProps) {\r\n  const [level, setLevel] = useState(rest.level ?? 1);\r\n  const [currentExperience, setCurrentExperience] = useState(rest.currentExperience ?? 0);\r\n  const [challengesCompleted, setChallengesCompleted] = useState(rest.challengesCompleted ?? 0);\r\n  const [activeChallenge, setActiveChallenge] = useState(null);\r\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\r\n  const [isLevelUpModalOpen, setIsLevelUpModalOpen] = useState(false)\r\n\r\n  useEffect(() => {\r\n    Notification.requestPermission();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    Cookies.set('level',level.toString())\r\n    Cookies.set('currentExperience',currentExperience.toString())\r\n    Cookies.set('challengesCompleted',challengesCompleted.toString())\r\n  }, [level, currentExperience, challengesCompleted]);\r\n\r\n  function levelUp(){\r\n    setLevel(level + 1);\r\n    setIsLevelUpModalOpen(true)\r\n  }\r\n  function startNewChallenge() {\r\n    const randomChallengIndex = Math.floor(Math.random() * challenges.length);\r\n    const challenge = challenges[randomChallengIndex];\r\n    setActiveChallenge(challenge);\r\n\r\n    new Audio(\"/notification.mp3\").play();\r\n\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Novo desafio\", {\r\n        body: `Valendo: ${challenge.amount}xp!`,\r\n      });\r\n    }\r\n  }\r\n\r\n  function resetChallenge() {\r\n    setActiveChallenge(null);\r\n  }\r\n\r\n  function completeChallenge() {\r\n    if (!activeChallenge) return;\r\n\r\n    const { amount } = activeChallenge;\r\n\r\n    let finalExperience = currentExperience + amount;\r\n\r\n    if (finalExperience >= experienceToNextLevel) {\r\n      finalExperience = finalExperience - experienceToNextLevel;\r\n      levelUp()\r\n    }\r\n\r\n    setCurrentExperience(finalExperience);\r\n    setActiveChallenge(null);\r\n    setChallengesCompleted(challengesCompleted + 1);\r\n  }\r\n\r\n  return (\r\n    <ChallengesContext.Provider\r\n      value={{\r\n        level,\r\n        experienceToNextLevel,\r\n        currentExperience,\r\n        challengesCompleted,\r\n        startNewChallenge,\r\n        activeChallenge,\r\n        resetChallenge,\r\n        completeChallenge,\r\n        levelUp\r\n      }}\r\n    >\r\n      {children}\r\n      {isLevelUpModalOpen && <LevelUpModal/>}\r\n    </ChallengesContext.Provider>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}