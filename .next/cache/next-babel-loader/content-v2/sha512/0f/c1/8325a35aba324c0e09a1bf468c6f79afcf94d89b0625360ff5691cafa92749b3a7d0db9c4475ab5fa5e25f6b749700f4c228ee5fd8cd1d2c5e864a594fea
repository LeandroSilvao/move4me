{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createContext, useEffect, useState } from \"react\";\nimport challenges from \"../../challenges.json\";\nimport Cookies from \"js-cookie\";\nimport { LevelUpModal } from \"../components/LevelUpModal\";\nexport const ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(props) {\n  var _props$level, _props$currentExperie, _props$challengesComp, _props$isDark;\n\n  const {\n    0: level,\n    1: setLevel\n  } = useState((_props$level = props.level) !== null && _props$level !== void 0 ? _props$level : 1);\n  const {\n    0: currentExperience,\n    1: setCurrentExperience\n  } = useState((_props$currentExperie = props.currentExperience) !== null && _props$currentExperie !== void 0 ? _props$currentExperie : 0);\n  const {\n    0: challengesCompleted,\n    1: setChallengesCompleted\n  } = useState((_props$challengesComp = props.challengesCompleted) !== null && _props$challengesComp !== void 0 ? _props$challengesComp : 0);\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null);\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n  const {\n    0: isLevelUpModalOpen,\n    1: setIsLevelUpModalOpen\n  } = useState(false);\n  const {\n    0: isDark,\n    1: setIsDark\n  } = useState((_props$isDark = props.isDark) !== null && _props$isDark !== void 0 ? _props$isDark : false);\n  useEffect(() => {\n    if (Notification) Notification.requestPermission();\n    if (isDark) document.body.classList.add(\"body-dt\");else document.body.classList.remove(\"body-dt\");\n  }, []);\n  useEffect(() => {\n    Cookies.set('isDark', isDark.toString());\n  }, [isDark]);\n  useEffect(() => {\n    Cookies.set(\"level\", level.toString());\n    Cookies.set(\"currentExperience\", currentExperience.toString());\n    Cookies.set(\"challengesCompleted\", challengesCompleted.toString());\n  }, [level, currentExperience, challengesCompleted]);\n\n  function SetDarkTheme(isSet) {\n    if (isSet) document.body.classList.add(\"body-dt\");else document.body.classList.remove(\"body-dt\");\n    Cookies.set('isDark', isDark.toString());\n    setIsDark(isSet);\n  }\n\n  function levelUp() {\n    setLevel(level + 1);\n    setIsLevelUpModalOpen(true);\n  }\n\n  function closeLevelUpModal() {\n    setIsLevelUpModalOpen(false);\n  }\n\n  function startNewChallenge() {\n    const randomChallengIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengIndex];\n    setActiveChallenge(challenge);\n\n    if (Audio) {\n      new Audio(\"/notification.mp3\").play();\n    }\n\n    if (Notification) {\n      if (Notification.permission === \"granted\") {\n        new Notification(\"Novo desafio\", {\n          body: `Valendo: ${challenge.amount}xp!`\n        });\n      }\n    }\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {\n    if (!activeChallenge) return;\n    const {\n      amount\n    } = activeChallenge;\n    let finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxs(ChallengesContext.Provider, {\n    value: {\n      isDark,\n      level,\n      experienceToNextLevel,\n      currentExperience,\n      challengesCompleted,\n      startNewChallenge,\n      activeChallenge,\n      resetChallenge,\n      completeChallenge,\n      levelUp,\n      closeLevelUpModal,\n      SetDarkTheme\n    },\n    children: [props.children, isLevelUpModalOpen && /*#__PURE__*/_jsx(LevelUpModal, {})]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}