{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Desktop\\\\Solve\\\\TREINAMENTOS\\\\NLW\\\\#4\\\\moveit-next\\\\src\\\\contexts\\\\CountdownContexts.tsx\";\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { ChallengesContext } from \"./ChallengeContexts\";\nconst CountdownContext = /*#__PURE__*/createContext({});\nexport function CountdownProvide({\n  children\n}) {\n  let countdownTimeout;\n  const {\n    0: time,\n    1: setTime\n  } = useState(0.1 * 60);\n  const {\n    0: isActive,\n    1: setIsActive\n  } = useState(false);\n  const {\n    0: hasFinished,\n    1: setHasFinished\n  } = useState(false);\n  const minutes = Math.floor(time / 60);\n  const seconds = time % 60;\n  const [minuteLeft, minuteRight] = String(minutes).padStart(2, \"0\").split(\"\");\n  const [secondLeft, secondRight] = String(seconds).padStart(2, \"0\").split(\"\");\n  const {\n    startNewChallenge\n  } = useContext(ChallengesContext);\n  useEffect(() => {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(() => {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time === 0) {\n      setHasFinished(true);\n      setIsActive(false);\n      startNewChallenge();\n    }\n  }, [isActive, time]);\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout);\n    setIsActive(false);\n    setTime(0.1 * 60);\n  }\n\n  return /*#__PURE__*/_jsxDEV(CountdownContext.Provider, {\n    value: {\n      minuteLeft,\n      minuteRight,\n      secondLeft,\n      secondRight,\n      startCountdown,\n      resetCountdown,\n      hasFinished,\n      isActive\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["D:/Desktop/Solve/TREINAMENTOS/NLW/#4/moveit-next/src/contexts/CountdownContexts.tsx"],"names":["createContext","useContext","useEffect","useState","ChallengesContext","CountdownContext","CountdownProvide","children","countdownTimeout","time","setTime","isActive","setIsActive","hasFinished","setHasFinished","minutes","Math","floor","seconds","minuteLeft","minuteRight","String","padStart","split","secondLeft","secondRight","startNewChallenge","setTimeout","startCountdown","resetCountdown","clearTimeout"],"mappings":";;AAAA,SAASA,aAAT,EAAmCC,UAAnC,EAA+CC,SAA/C,EAA0DC,QAA1D,QAA0E,OAA1E;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAiBA,MAAMC,gBAAgB,gBAAGL,aAAa,CAAC,EAAD,CAAtC;AAEA,OAAO,SAASM,gBAAT,CAA0B;AAAEC,EAAAA;AAAF,CAA1B,EAA8D;AACnE,MAAIC,gBAAJ;AAEA,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBP,QAAQ,CAAC,MAAM,EAAP,CAAhC;AACA,QAAM;AAAA,OAACQ,QAAD;AAAA,OAAWC;AAAX,MAA0BT,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM;AAAA,OAACU,WAAD;AAAA,OAAcC;AAAd,MAAgCX,QAAQ,CAAC,KAAD,CAA9C;AAEA,QAAMY,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWR,IAAI,GAAG,EAAlB,CAAhB;AACA,QAAMS,OAAO,GAAGT,IAAI,GAAG,EAAvB;AAEA,QAAM,CAACU,UAAD,EAAaC,WAAb,IAA4BC,MAAM,CAACN,OAAD,CAAN,CAAgBO,QAAhB,CAAyB,CAAzB,EAA4B,GAA5B,EAAiCC,KAAjC,CAAuC,EAAvC,CAAlC;AACA,QAAM,CAACC,UAAD,EAAaC,WAAb,IAA4BJ,MAAM,CAACH,OAAD,CAAN,CAAgBI,QAAhB,CAAyB,CAAzB,EAA4B,GAA5B,EAAiCC,KAAjC,CAAuC,EAAvC,CAAlC;AAEA,QAAM;AAAEG,IAAAA;AAAF,MAAwBzB,UAAU,CAACG,iBAAD,CAAxC;AAGAF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,QAAQ,IAAIF,IAAI,GAAG,CAAvB,EAA0B;AACxBD,MAAAA,gBAAgB,GAAGmB,UAAU,CAAC,MAAM;AAClCjB,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACD,OAF4B,EAE1B,IAF0B,CAA7B;AAGD,KAJD,MAIO,IAAIE,QAAQ,IAAIF,IAAI,KAAK,CAAzB,EAA4B;AACjCK,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAc,MAAAA,iBAAiB;AAClB;AACF,GAVQ,EAUN,CAACf,QAAD,EAAWF,IAAX,CAVM,CAAT;;AAaA,WAASmB,cAAT,GAA0B;AACxBhB,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD;;AACD,WAASiB,cAAT,GAA0B;AACxBC,IAAAA,YAAY,CAACtB,gBAAD,CAAZ;AACAI,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAF,IAAAA,OAAO,CAAC,MAAM,EAAP,CAAP;AACD;;AAED,sBACE,QAAC,gBAAD,CAAkB,QAAlB;AACE,IAAA,KAAK,EAAE;AACLS,MAAAA,UADK;AAELC,MAAAA,WAFK;AAGLI,MAAAA,UAHK;AAILC,MAAAA,WAJK;AAKLG,MAAAA,cALK;AAMLC,MAAAA,cANK;AAOLhB,MAAAA,WAPK;AAQLF,MAAAA;AARK,KADT;AAAA,cAYGJ;AAZH;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD","sourcesContent":["import { createContext, ReactNode, useContext, useEffect, useState } from \"react\";\r\nimport { ChallengesContext } from \"./ChallengeContexts\";\r\n\r\ninterface CountdownContextData {\r\n  minuteLeft: string;\r\n  minuteRight: string;\r\n  secondLeft: string;\r\n  secondRight: string;\r\n  hasFinished: boolean;\r\n  isActive: boolean;\r\n  resetCountdown: () => void;\r\n  startCountdown: () => void;\r\n}\r\n\r\ninterface CountdownProvideProps {\r\n    children: ReactNode;\r\n  }\r\n\r\nconst CountdownContext = createContext({} as CountdownContextData);\r\n\r\nexport function CountdownProvide({ children }:CountdownProvideProps) {\r\n  let countdownTimeout: NodeJS.Timeout;\r\n\r\n  const [time, setTime] = useState(0.1 * 60);\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [hasFinished, setHasFinished] = useState(false);\r\n\r\n  const minutes = Math.floor(time / 60);\r\n  const seconds = time % 60;\r\n\r\n  const [minuteLeft, minuteRight] = String(minutes).padStart(2, \"0\").split(\"\");\r\n  const [secondLeft, secondRight] = String(seconds).padStart(2, \"0\").split(\"\");\r\n\r\n  const { startNewChallenge } = useContext(ChallengesContext)\r\n\r\n  \r\n  useEffect(() => {\r\n    if (isActive && time > 0) {\r\n      countdownTimeout = setTimeout(() => {\r\n        setTime(time - 1);\r\n      }, 1000);\r\n    } else if (isActive && time === 0) {\r\n      setHasFinished(true);\r\n      setIsActive(false);\r\n      startNewChallenge()\r\n    }\r\n  }, [isActive, time]);\r\n\r\n\r\n  function startCountdown() {\r\n    setIsActive(true);\r\n  }\r\n  function resetCountdown() {\r\n    clearTimeout(countdownTimeout);\r\n    setIsActive(false);\r\n    setTime(0.1 * 60);\r\n  }\r\n\r\n  return (\r\n    <CountdownContext.Provider\r\n      value={{\r\n        minuteLeft,\r\n        minuteRight,\r\n        secondLeft,\r\n        secondRight,\r\n        startCountdown,\r\n        resetCountdown,\r\n        hasFinished,\r\n        isActive\r\n      }}\r\n    >\r\n      {children}\r\n    </CountdownContext.Provider>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}