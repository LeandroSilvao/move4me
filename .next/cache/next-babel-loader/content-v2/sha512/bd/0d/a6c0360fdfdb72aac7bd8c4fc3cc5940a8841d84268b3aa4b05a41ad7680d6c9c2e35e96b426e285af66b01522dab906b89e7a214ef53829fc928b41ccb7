{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"D:/Desktop/Solve/TREINAMENTOS/NLW/#4/moveit-next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"D:\\\\Desktop\\\\Solve\\\\TREINAMENTOS\\\\NLW\\\\#4\\\\moveit-next\\\\src\\\\contexts\\\\CountdownContexts.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { ChallengesContext } from \"./ChallengeContexts\";\nvar CountdownContext = /*#__PURE__*/createContext({});\nexport function CountdownProvide(_ref) {\n  _s();\n\n  var children = _ref.children;\n  var countdownTimeout;\n\n  var _useState = useState(0.1 * 60),\n      time = _useState[0],\n      setTime = _useState[1];\n\n  var _useState2 = useState(false),\n      isActive = _useState2[0],\n      setIsActive = _useState2[1];\n\n  var _useState3 = useState(false),\n      hasFinished = _useState3[0],\n      setHasFinished = _useState3[1];\n\n  var minutes = Math.floor(time / 60);\n  var seconds = time % 60;\n\n  var _String$padStart$spli = String(minutes).padStart(2, \"0\").split(\"\"),\n      _String$padStart$spli2 = _slicedToArray(_String$padStart$spli, 2),\n      minuteLeft = _String$padStart$spli2[0],\n      minuteRight = _String$padStart$spli2[1];\n\n  var _String$padStart$spli3 = String(seconds).padStart(2, \"0\").split(\"\"),\n      _String$padStart$spli4 = _slicedToArray(_String$padStart$spli3, 2),\n      secondLeft = _String$padStart$spli4[0],\n      secondRight = _String$padStart$spli4[1];\n\n  var _useContext = useContext(ChallengesContext),\n      startNewChallenge = _useContext.startNewChallenge;\n\n  useEffect(function () {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(function () {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time === 0) {\n      setHasFinished(true);\n      setIsActive(false);\n      startNewChallenge();\n    }\n  }, [isActive, time]);\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout);\n    setIsActive(false);\n    setTime(0.1 * 60);\n  }\n\n  return /*#__PURE__*/_jsxDEV(CountdownContext.Provider, {\n    value: {\n      minuteLeft: minuteLeft,\n      minuteRight: minuteRight,\n      secondLeft: secondLeft,\n      secondRight: secondRight,\n      startCountdown: startCountdown,\n      resetCountdown: resetCountdown,\n      hasFinished: hasFinished,\n      isActive: isActive\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CountdownProvide, \"xQoBG5WteiYjp1jjnAlN9x90smk=\");\n\n_c = CountdownProvide;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountdownProvide\");","map":{"version":3,"sources":["D:/Desktop/Solve/TREINAMENTOS/NLW/#4/moveit-next/src/contexts/CountdownContexts.tsx"],"names":["createContext","useContext","useEffect","useState","ChallengesContext","CountdownContext","CountdownProvide","children","countdownTimeout","time","setTime","isActive","setIsActive","hasFinished","setHasFinished","minutes","Math","floor","seconds","String","padStart","split","minuteLeft","minuteRight","secondLeft","secondRight","startNewChallenge","setTimeout","startCountdown","resetCountdown","clearTimeout"],"mappings":";;;;;;AAAA,SAASA,aAAT,EAAmCC,UAAnC,EAA+CC,SAA/C,EAA0DC,QAA1D,QAA0E,OAA1E;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAiBA,IAAMC,gBAAgB,gBAAGL,aAAa,CAAC,EAAD,CAAtC;AAEA,OAAO,SAASM,gBAAT,OAA8D;AAAA;;AAAA,MAAlCC,QAAkC,QAAlCA,QAAkC;AACnE,MAAIC,gBAAJ;;AADmE,kBAG3CL,QAAQ,CAAC,MAAM,EAAP,CAHmC;AAAA,MAG5DM,IAH4D;AAAA,MAGtDC,OAHsD;;AAAA,mBAInCP,QAAQ,CAAC,KAAD,CAJ2B;AAAA,MAI5DQ,QAJ4D;AAAA,MAIlDC,WAJkD;;AAAA,mBAK7BT,QAAQ,CAAC,KAAD,CALqB;AAAA,MAK5DU,WAL4D;AAAA,MAK/CC,cAL+C;;AAOnE,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWR,IAAI,GAAG,EAAlB,CAAhB;AACA,MAAMS,OAAO,GAAGT,IAAI,GAAG,EAAvB;;AARmE,8BAUjCU,MAAM,CAACJ,OAAD,CAAN,CAAgBK,QAAhB,CAAyB,CAAzB,EAA4B,GAA5B,EAAiCC,KAAjC,CAAuC,EAAvC,CAViC;AAAA;AAAA,MAU5DC,UAV4D;AAAA,MAUhDC,WAVgD;;AAAA,+BAWjCJ,MAAM,CAACD,OAAD,CAAN,CAAgBE,QAAhB,CAAyB,CAAzB,EAA4B,GAA5B,EAAiCC,KAAjC,CAAuC,EAAvC,CAXiC;AAAA;AAAA,MAW5DG,UAX4D;AAAA,MAWhDC,WAXgD;;AAAA,oBAarCxB,UAAU,CAACG,iBAAD,CAb2B;AAAA,MAa3DsB,iBAb2D,eAa3DA,iBAb2D;;AAgBnExB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIS,QAAQ,IAAIF,IAAI,GAAG,CAAvB,EAA0B;AACxBD,MAAAA,gBAAgB,GAAGmB,UAAU,CAAC,YAAM;AAClCjB,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACD,OAF4B,EAE1B,IAF0B,CAA7B;AAGD,KAJD,MAIO,IAAIE,QAAQ,IAAIF,IAAI,KAAK,CAAzB,EAA4B;AACjCK,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAc,MAAAA,iBAAiB;AAClB;AACF,GAVQ,EAUN,CAACf,QAAD,EAAWF,IAAX,CAVM,CAAT;;AAaA,WAASmB,cAAT,GAA0B;AACxBhB,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD;;AACD,WAASiB,cAAT,GAA0B;AACxBC,IAAAA,YAAY,CAACtB,gBAAD,CAAZ;AACAI,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAF,IAAAA,OAAO,CAAC,MAAM,EAAP,CAAP;AACD;;AAED,sBACE,QAAC,gBAAD,CAAkB,QAAlB;AACE,IAAA,KAAK,EAAE;AACLY,MAAAA,UAAU,EAAVA,UADK;AAELC,MAAAA,WAAW,EAAXA,WAFK;AAGLC,MAAAA,UAAU,EAAVA,UAHK;AAILC,MAAAA,WAAW,EAAXA,WAJK;AAKLG,MAAAA,cAAc,EAAdA,cALK;AAMLC,MAAAA,cAAc,EAAdA,cANK;AAOLhB,MAAAA,WAAW,EAAXA,WAPK;AAQLF,MAAAA,QAAQ,EAARA;AARK,KADT;AAAA,cAYGJ;AAZH;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GAtDeD,gB;;KAAAA,gB","sourcesContent":["import { createContext, ReactNode, useContext, useEffect, useState } from \"react\";\r\nimport { ChallengesContext } from \"./ChallengeContexts\";\r\n\r\ninterface CountdownContextData {\r\n  minuteLeft: string;\r\n  minuteRight: string;\r\n  secondLeft: string;\r\n  secondRight: string;\r\n  hasFinished: boolean;\r\n  isActive: boolean;\r\n  resetCountdown: () => void;\r\n  startCountdown: () => void;\r\n}\r\n\r\ninterface CountdownProvideProps {\r\n    children: ReactNode;\r\n  }\r\n\r\nconst CountdownContext = createContext({} as CountdownContextData);\r\n\r\nexport function CountdownProvide({ children }:CountdownProvideProps) {\r\n  let countdownTimeout: NodeJS.Timeout;\r\n\r\n  const [time, setTime] = useState(0.1 * 60);\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [hasFinished, setHasFinished] = useState(false);\r\n\r\n  const minutes = Math.floor(time / 60);\r\n  const seconds = time % 60;\r\n\r\n  const [minuteLeft, minuteRight] = String(minutes).padStart(2, \"0\").split(\"\");\r\n  const [secondLeft, secondRight] = String(seconds).padStart(2, \"0\").split(\"\");\r\n\r\n  const { startNewChallenge } = useContext(ChallengesContext)\r\n\r\n  \r\n  useEffect(() => {\r\n    if (isActive && time > 0) {\r\n      countdownTimeout = setTimeout(() => {\r\n        setTime(time - 1);\r\n      }, 1000);\r\n    } else if (isActive && time === 0) {\r\n      setHasFinished(true);\r\n      setIsActive(false);\r\n      startNewChallenge()\r\n    }\r\n  }, [isActive, time]);\r\n\r\n\r\n  function startCountdown() {\r\n    setIsActive(true);\r\n  }\r\n  function resetCountdown() {\r\n    clearTimeout(countdownTimeout);\r\n    setIsActive(false);\r\n    setTime(0.1 * 60);\r\n  }\r\n\r\n  return (\r\n    <CountdownContext.Provider\r\n      value={{\r\n        minuteLeft,\r\n        minuteRight,\r\n        secondLeft,\r\n        secondRight,\r\n        startCountdown,\r\n        resetCountdown,\r\n        hasFinished,\r\n        isActive\r\n      }}\r\n    >\r\n      {children}\r\n    </CountdownContext.Provider>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}